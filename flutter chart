// main.dart

import 'package:flutter/material.dart';
import './home.dart';
void main() => runApp(MyApp());
class MyApp extends StatelessWidget {
const MyApp({super.key});
Widget build(BuildContext context) {
return MaterialApp(
debugShowCheckedModeBanner: false,
home: HomePage(),
);
}
}


//home.dart:

import 'package:flutter/material.dart';
import 'package:charts_flutter/flutter.dart' as charts;
// import 'package:my_app/developer_chart.dart';
import './developer_series.dart';
import 'developer_chart.dart';
class HomePage extends StatelessWidget {
final List<DeveloperSeries> data = [
DeveloperSeries(
year: "2002",
developers: 40000,
barColor: charts.ColorUtil.fromDartColor(Colors.green),
),
DeveloperSeries(
year: "2003",
developers: 5000,
barColor: charts.ColorUtil.fromDartColor(Colors.green),
),
DeveloperSeries(
year: "2004",
developers: 40000,
barColor: charts.ColorUtil.fromDartColor(Colors.green),
),
DeveloperSeries(
year: "2005",
developers: 35000,
barColor: charts.ColorUtil.fromDartColor(Colors.green),
),
DeveloperSeries(
year: "2006",
developers: 45000,
barColor: charts.ColorUtil.fromDartColor(Colors.green),
),
];
@override
Widget build(BuildContext context) {
return Scaffold(
body: Center(
child: DeveloperChart(
data: data,
),
),
);
}
}

//developer_series.dart:-

import 'package:charts_flutter/flutter.dart' as charts;
class DeveloperSeries{
final String year;
final int developers;
final charts.Color barColor;
DeveloperSeries(
{required this.year, required this.developers, required this.barColor}
);
}

//developer_chart.dart:-

import 'package:flutter/material.dart';
import 'package:charts_flutter/flutter.dart' as charts;
import './developer_series.dart';
class DeveloperChart extends StatelessWidget {
final List<DeveloperSeries> data;
DeveloperChart({required this.data});
@override
Widget build(BuildContext context) {
List<charts.Series<DeveloperSeries, String>> series = [
charts.Series(
id: "developers",
data: data,
domainFn: (DeveloperSeries series, _) => series.year,
measureFn: (DeveloperSeries series, _) => series.developers,
colorFn: (DeveloperSeries series, _) => series.barColor)
];
return charts.BarChart(series, animate: true);
}
}

